digraph Program {
node [margin=0 shape=box textalign=left]
"B1 {\n  4: ENTER{Program}\n  6: CREATE_FUNCTION{}\n  7: STORE_VALUE{inflate}\n  8: POP{}\n  9: CREATE_FUNCTION{}\n  10: STORE_VALUE{build_fixed}\n  11: POP{}\n  12: CREATE_FUNCTION{}\n  13: STORE_VALUE{construct}\n  14: POP{}\n  15: CREATE_FUNCTION{}\n  16: STORE_VALUE{readdata}\n  17: POP{}\n  18: LOAD_NAME{binary}\n  19: LOAD_VALUE{require}\n  20: LOAD_LITERAL{bops}\n  21: CALL{1}\n  22: STORE_VALUE{binary}\n  23: LOAD_NAME{MAXBITS}\n  24: LOAD_LITERAL{15}\n  25: STORE_VALUE{MAXBITS}\n  26: LOAD_NAME{MAXLCODES}\n  27: LOAD_LITERAL{286}\n  28: STORE_VALUE{MAXLCODES}\n  29: LOAD_NAME{MAXDCODES}\n  30: LOAD_LITERAL{30}\n  31: STORE_VALUE{MAXDCODES}\n  32: LOAD_NAME{MAXCODES}\n  33: LOAD_VALUE{MAXLCODES}\n  34: LOAD_VALUE{MAXDCODES}\n  35: ADD{}\n  36: STORE_VALUE{MAXCODES}\n  37: LOAD_NAME{FIXLCODES}\n  38: LOAD_LITERAL{288}\n  39: STORE_VALUE{FIXLCODES}\n  40: LOAD_NAME{lens}\n  41: LOAD_LITERAL{3}\n  42: LOAD_LITERAL{4}\n  43: LOAD_LITERAL{5}\n  44: LOAD_LITERAL{6}\n  45: LOAD_LITERAL{7}\n  46: LOAD_LITERAL{8}\n  47: LOAD_LITERAL{9}\n  48: LOAD_LITERAL{10}\n  49: LOAD_LITERAL{11}\n  50: LOAD_LITERAL{13}\n  51: LOAD_LITERAL{15}\n  52: LOAD_LITERAL{17}\n  53: LOAD_LITERAL{19}\n  54: LOAD_LITERAL{23}\n  55: LOAD_LITERAL{27}\n  56: LOAD_LITERAL{31}\n  57: LOAD_LITERAL{35}\n  58: LOAD_LITERAL{43}\n  59: LOAD_LITERAL{51}\n  60: LOAD_LITERAL{59}\n  61: LOAD_LITERAL{67}\n  62: LOAD_LITERAL{83}\n  63: LOAD_LITERAL{99}\n  64: LOAD_LITERAL{115}\n  65: LOAD_LITERAL{131}\n  66: LOAD_LITERAL{163}\n  67: LOAD_LITERAL{195}\n  68: LOAD_LITERAL{227}\n  69: LOAD_LITERAL{258}\n  70: LOAD_LITERAL_ARRAY{29}\n  71: STORE_VALUE{lens}\n  72: LOAD_NAME{lext}\n  73: LOAD_LITERAL{}\n  74: LOAD_LITERAL{}\n  75: LOAD_LITERAL{}\n  76: LOAD_LITERAL{}\n  77: LOAD_LITERAL{}\n  78: LOAD_LITERAL{}\n  79: LOAD_LITERAL{}\n  80: LOAD_LITERAL{}\n  81: LOAD_LITERAL{1}\n  82: LOAD_LITERAL{1}\n  83: LOAD_LITERAL{1}\n  84: LOAD_LITERAL{1}\n  85: LOAD_LITERAL{2}\n  86: LOAD_LITERAL{2}\n  87: LOAD_LITERAL{2}\n  88: LOAD_LITERAL{2}\n  89: LOAD_LITERAL{3}\n  90: LOAD_LITERAL{3}\n  91: LOAD_LITERAL{3}\n  92: LOAD_LITERAL{3}\n  93: LOAD_LITERAL{4}\n  94: LOAD_LITERAL{4}\n  95: LOAD_LITERAL{4}\n  96: LOAD_LITERAL{4}\n  97: LOAD_LITERAL{5}\n  98: LOAD_LITERAL{5}\n  99: LOAD_LITERAL{5}\n  100: LOAD_LITERAL{5}\n  101: LOAD_LITERAL{}\n  102: LOAD_LITERAL_ARRAY{29}\n  103: STORE_VALUE{lext}\n  104: LOAD_NAME{dists}\n  105: LOAD_LITERAL{1}\n  106: LOAD_LITERAL{2}\n  107: LOAD_LITERAL{3}\n  108: LOAD_LITERAL{4}\n  109: LOAD_LITERAL{5}\n  110: LOAD_LITERAL{7}\n  111: LOAD_LITERAL{9}\n  112: LOAD_LITERAL{13}\n  113: LOAD_LITERAL{17}\n  114: LOAD_LITERAL{25}\n  115: LOAD_LITERAL{33}\n  116: LOAD_LITERAL{49}\n  117: LOAD_LITERAL{65}\n  118: LOAD_LITERAL{97}\n  119: LOAD_LITERAL{129}\n  120: LOAD_LITERAL{193}\n  121: LOAD_LITERAL{257}\n  122: LOAD_LITERAL{385}\n  123: LOAD_LITERAL{513}\n  124: LOAD_LITERAL{769}\n  125: LOAD_LITERAL{1025}\n  126: LOAD_LITERAL{1537}\n  127: LOAD_LITERAL{2049}\n  128: LOAD_LITERAL{3073}\n  129: LOAD_LITERAL{4097}\n  130: LOAD_LITERAL{6145}\n  131: LOAD_LITERAL{8193}\n  132: LOAD_LITERAL{12289}\n  133: LOAD_LITERAL{16385}\n  134: LOAD_LITERAL{24577}\n  135: LOAD_LITERAL_ARRAY{30}\n  136: STORE_VALUE{dists}\n  137: LOAD_NAME{dext}\n  138: LOAD_LITERAL{}\n  139: LOAD_LITERAL{}\n  140: LOAD_LITERAL{}\n  141: LOAD_LITERAL{}\n  142: LOAD_LITERAL{1}\n  143: LOAD_LITERAL{1}\n  144: LOAD_LITERAL{2}\n  145: LOAD_LITERAL{2}\n  146: LOAD_LITERAL{3}\n  147: LOAD_LITERAL{3}\n  148: LOAD_LITERAL{4}\n  149: LOAD_LITERAL{4}\n  150: LOAD_LITERAL{5}\n  151: LOAD_LITERAL{5}\n  152: LOAD_LITERAL{6}\n  153: LOAD_LITERAL{6}\n  154: LOAD_LITERAL{7}\n  155: LOAD_LITERAL{7}\n  156: LOAD_LITERAL{8}\n  157: LOAD_LITERAL{8}\n  158: LOAD_LITERAL{9}\n  159: LOAD_LITERAL{9}\n  160: LOAD_LITERAL{10}\n  161: LOAD_LITERAL{10}\n  162: LOAD_LITERAL{11}\n  163: LOAD_LITERAL{11}\n  164: LOAD_LITERAL{12}\n  165: LOAD_LITERAL{12}\n  166: LOAD_LITERAL{13}\n  167: LOAD_LITERAL{13}\n  168: LOAD_LITERAL_ARRAY{30}\n  169: STORE_VALUE{dext}\n  170: LOAD_NAME{order}\n  171: LOAD_LITERAL{16}\n  172: LOAD_LITERAL{17}\n  173: LOAD_LITERAL{18}\n  174: LOAD_LITERAL{}\n  175: LOAD_LITERAL{8}\n  176: LOAD_LITERAL{7}\n  177: LOAD_LITERAL{9}\n  178: LOAD_LITERAL{6}\n  179: LOAD_LITERAL{10}\n  180: LOAD_LITERAL{5}\n  181: LOAD_LITERAL{11}\n  182: LOAD_LITERAL{4}\n  183: LOAD_LITERAL{12}\n  184: LOAD_LITERAL{3}\n  185: LOAD_LITERAL{13}\n  186: LOAD_LITERAL{2}\n  187: LOAD_LITERAL{14}\n  188: LOAD_LITERAL{1}\n  189: LOAD_LITERAL{15}\n  190: LOAD_LITERAL_ARRAY{19}\n  191: STORE_VALUE{order}\n  192: LOAD_NAME{WINDOW}\n  193: LOAD_LITERAL{32768}\n  194: STORE_VALUE{WINDOW}\n  195: LOAD_NAME{WINDOW_MINUS_ONE}\n  196: LOAD_VALUE{WINDOW}\n  197: LOAD_LITERAL{1}\n  198: SUB{}\n  199: STORE_VALUE{WINDOW_MINUS_ONE}\n  200: LOAD_NAME{writer}\n  201: LOAD_VALUE{inflate}\n  202: LOAD_VALUE{readdata}\n  203: CALL{1}\n  205: ENTER{FunctionDeclaration}\n  208: CREATE_FUNCTION{}\n  209: STORE_VALUE{onread}\n  210: POP{}\n  211: CREATE_FUNCTION{}\n  212: STORE_VALUE{noop}\n  213: POP{}\n  214: CREATE_FUNCTION{}\n  215: STORE_VALUE{call_header}\n  216: POP{}\n  217: CREATE_FUNCTION{}\n  218: STORE_VALUE{call_bytes}\n  219: POP{}\n  220: CREATE_FUNCTION{}\n  221: STORE_VALUE{call_bits}\n  222: POP{}\n  223: CREATE_FUNCTION{}\n  224: STORE_VALUE{call_codes}\n  225: POP{}\n  226: CREATE_FUNCTION{}\n  227: STORE_VALUE{call_dynamic}\n  228: POP{}\n  229: CREATE_FUNCTION{}\n  230: STORE_VALUE{call_decode}\n  231: POP{}\n  232: CREATE_FUNCTION{}\n  233: STORE_VALUE{write}\n  234: POP{}\n  235: CREATE_FUNCTION{}\n  236: STORE_VALUE{execute}\n  237: POP{}\n  238: CREATE_FUNCTION{}\n  239: STORE_VALUE{start_stream_header}\n  240: POP{}\n  241: CREATE_FUNCTION{}\n  242: STORE_VALUE{got_stream_header}\n  243: POP{}\n  244: CREATE_FUNCTION{}\n  245: STORE_VALUE{on_got_fdict}\n  246: POP{}\n  247: CREATE_FUNCTION{}\n  248: STORE_VALUE{on_got_is_final}\n  249: POP{}\n  250: CREATE_FUNCTION{}\n  251: STORE_VALUE{on_got_type}\n  252: POP{}\n  253: CREATE_FUNCTION{}\n  254: STORE_VALUE{on_got_len_nlen}\n  255: POP{}\n  256: CREATE_FUNCTION{}\n  257: STORE_VALUE{on_got_stored}\n  258: POP{}\n  259: CREATE_FUNCTION{}\n  260: STORE_VALUE{start_dynamic}\n  261: POP{}\n  262: CREATE_FUNCTION{}\n  263: STORE_VALUE{on_got_nlen}\n  264: POP{}\n  265: CREATE_FUNCTION{}\n  266: STORE_VALUE{on_got_ndist}\n  267: POP{}\n  268: CREATE_FUNCTION{}\n  269: STORE_VALUE{on_got_ncode}\n  270: POP{}\n  271: CREATE_FUNCTION{}\n  272: STORE_VALUE{on_got_lengths_part}\n  273: POP{}\n  274: CREATE_FUNCTION{}\n  275: STORE_VALUE{on_got_dynamic_symbol_iter}\n  276: POP{}\n  277: CREATE_FUNCTION{}\n  278: STORE_VALUE{on_got_dynamic_symbol_16}\n  279: POP{}\n  280: CREATE_FUNCTION{}\n  281: STORE_VALUE{on_got_dynamic_symbol_17}\n  282: POP{}\n  283: CREATE_FUNCTION{}\n  284: STORE_VALUE{on_got_dynamic_symbol}\n  285: POP{}\n  286: CREATE_FUNCTION{}\n  287: STORE_VALUE{do_dynamic_end_loop}\n  288: POP{}\n  289: CREATE_FUNCTION{}\n  290: STORE_VALUE{do_check}\n  291: POP{}\n  292: CREATE_FUNCTION{}\n  293: STORE_VALUE{end_read_dynamic}\n  294: POP{}\n  295: CREATE_FUNCTION{}\n  296: STORE_VALUE{start_codes}\n  297: POP{}\n  298: CREATE_FUNCTION{}\n  299: STORE_VALUE{on_got_codes_symbol}\n  300: POP{}\n  301: CREATE_FUNCTION{}\n  302: STORE_VALUE{on_got_codes_len}\n  303: POP{}\n  304: CREATE_FUNCTION{}\n  305: STORE_VALUE{on_got_codes_dist_symbol}\n  306: POP{}\n  307: CREATE_FUNCTION{}\n  308: STORE_VALUE{on_got_codes_dist_dist}\n  309: POP{}\n  310: CREATE_FUNCTION{}\n  311: STORE_VALUE{done_with_codes}\n  312: POP{}\n  313: CREATE_FUNCTION{}\n  314: STORE_VALUE{on_got_adler}\n  315: POP{}\n  316: CREATE_FUNCTION{}\n  317: STORE_VALUE{decode}\n  318: POP{}\n  319: CREATE_FUNCTION{}\n  320: STORE_VALUE{_decode}\n  321: POP{}\n  322: CREATE_FUNCTION{}\n  323: STORE_VALUE{got_decode_bit}\n  324: POP{}\n  325: CREATE_FUNCTION{}\n  326: STORE_VALUE{become}\n  327: POP{}\n  328: CREATE_FUNCTION{}\n  329: STORE_VALUE{unbecome}\n  330: POP{}\n  331: CREATE_FUNCTION{}\n  332: STORE_VALUE{bits}\n  333: POP{}\n  334: CREATE_FUNCTION{}\n  335: STORE_VALUE{bytes}\n  336: POP{}\n  337: CREATE_FUNCTION{}\n  338: STORE_VALUE{take}\n  339: POP{}\n  340: CREATE_FUNCTION{}\n  341: STORE_VALUE{takebyte}\n  342: POP{}\n  343: CREATE_FUNCTION{}\n  344: STORE_VALUE{output_one}\n  345: POP{}\n  346: CREATE_FUNCTION{}\n  347: STORE_VALUE{output_one_pool}\n  348: POP{}\n  349: CREATE_FUNCTION{}\n  350: STORE_VALUE{output_one_recycle}\n  351: POP{}\n  352: CREATE_FUNCTION{}\n  353: STORE_VALUE{output_many}\n  354: POP{}\n  355: ENTER{BlockStatement}\n  357: LOAD_NAME{output}\n  358: LOAD_NAME{Uint8Array}\n  359: LOAD_VALUE{WINDOW}\n}";
"B2 {\n  360: NEW{}\n}";
"B1 {\n  4: ENTER{Program}\n  6: CREATE_FUNCTION{}\n  7: STORE_VALUE{inflate}\n  8: POP{}\n  9: CREATE_FUNCTION{}\n  10: STORE_VALUE{build_fixed}\n  11: POP{}\n  12: CREATE_FUNCTION{}\n  13: STORE_VALUE{construct}\n  14: POP{}\n  15: CREATE_FUNCTION{}\n  16: STORE_VALUE{readdata}\n  17: POP{}\n  18: LOAD_NAME{binary}\n  19: LOAD_VALUE{require}\n  20: LOAD_LITERAL{bops}\n  21: CALL{1}\n  22: STORE_VALUE{binary}\n  23: LOAD_NAME{MAXBITS}\n  24: LOAD_LITERAL{15}\n  25: STORE_VALUE{MAXBITS}\n  26: LOAD_NAME{MAXLCODES}\n  27: LOAD_LITERAL{286}\n  28: STORE_VALUE{MAXLCODES}\n  29: LOAD_NAME{MAXDCODES}\n  30: LOAD_LITERAL{30}\n  31: STORE_VALUE{MAXDCODES}\n  32: LOAD_NAME{MAXCODES}\n  33: LOAD_VALUE{MAXLCODES}\n  34: LOAD_VALUE{MAXDCODES}\n  35: ADD{}\n  36: STORE_VALUE{MAXCODES}\n  37: LOAD_NAME{FIXLCODES}\n  38: LOAD_LITERAL{288}\n  39: STORE_VALUE{FIXLCODES}\n  40: LOAD_NAME{lens}\n  41: LOAD_LITERAL{3}\n  42: LOAD_LITERAL{4}\n  43: LOAD_LITERAL{5}\n  44: LOAD_LITERAL{6}\n  45: LOAD_LITERAL{7}\n  46: LOAD_LITERAL{8}\n  47: LOAD_LITERAL{9}\n  48: LOAD_LITERAL{10}\n  49: LOAD_LITERAL{11}\n  50: LOAD_LITERAL{13}\n  51: LOAD_LITERAL{15}\n  52: LOAD_LITERAL{17}\n  53: LOAD_LITERAL{19}\n  54: LOAD_LITERAL{23}\n  55: LOAD_LITERAL{27}\n  56: LOAD_LITERAL{31}\n  57: LOAD_LITERAL{35}\n  58: LOAD_LITERAL{43}\n  59: LOAD_LITERAL{51}\n  60: LOAD_LITERAL{59}\n  61: LOAD_LITERAL{67}\n  62: LOAD_LITERAL{83}\n  63: LOAD_LITERAL{99}\n  64: LOAD_LITERAL{115}\n  65: LOAD_LITERAL{131}\n  66: LOAD_LITERAL{163}\n  67: LOAD_LITERAL{195}\n  68: LOAD_LITERAL{227}\n  69: LOAD_LITERAL{258}\n  70: LOAD_LITERAL_ARRAY{29}\n  71: STORE_VALUE{lens}\n  72: LOAD_NAME{lext}\n  73: LOAD_LITERAL{}\n  74: LOAD_LITERAL{}\n  75: LOAD_LITERAL{}\n  76: LOAD_LITERAL{}\n  77: LOAD_LITERAL{}\n  78: LOAD_LITERAL{}\n  79: LOAD_LITERAL{}\n  80: LOAD_LITERAL{}\n  81: LOAD_LITERAL{1}\n  82: LOAD_LITERAL{1}\n  83: LOAD_LITERAL{1}\n  84: LOAD_LITERAL{1}\n  85: LOAD_LITERAL{2}\n  86: LOAD_LITERAL{2}\n  87: LOAD_LITERAL{2}\n  88: LOAD_LITERAL{2}\n  89: LOAD_LITERAL{3}\n  90: LOAD_LITERAL{3}\n  91: LOAD_LITERAL{3}\n  92: LOAD_LITERAL{3}\n  93: LOAD_LITERAL{4}\n  94: LOAD_LITERAL{4}\n  95: LOAD_LITERAL{4}\n  96: LOAD_LITERAL{4}\n  97: LOAD_LITERAL{5}\n  98: LOAD_LITERAL{5}\n  99: LOAD_LITERAL{5}\n  100: LOAD_LITERAL{5}\n  101: LOAD_LITERAL{}\n  102: LOAD_LITERAL_ARRAY{29}\n  103: STORE_VALUE{lext}\n  104: LOAD_NAME{dists}\n  105: LOAD_LITERAL{1}\n  106: LOAD_LITERAL{2}\n  107: LOAD_LITERAL{3}\n  108: LOAD_LITERAL{4}\n  109: LOAD_LITERAL{5}\n  110: LOAD_LITERAL{7}\n  111: LOAD_LITERAL{9}\n  112: LOAD_LITERAL{13}\n  113: LOAD_LITERAL{17}\n  114: LOAD_LITERAL{25}\n  115: LOAD_LITERAL{33}\n  116: LOAD_LITERAL{49}\n  117: LOAD_LITERAL{65}\n  118: LOAD_LITERAL{97}\n  119: LOAD_LITERAL{129}\n  120: LOAD_LITERAL{193}\n  121: LOAD_LITERAL{257}\n  122: LOAD_LITERAL{385}\n  123: LOAD_LITERAL{513}\n  124: LOAD_LITERAL{769}\n  125: LOAD_LITERAL{1025}\n  126: LOAD_LITERAL{1537}\n  127: LOAD_LITERAL{2049}\n  128: LOAD_LITERAL{3073}\n  129: LOAD_LITERAL{4097}\n  130: LOAD_LITERAL{6145}\n  131: LOAD_LITERAL{8193}\n  132: LOAD_LITERAL{12289}\n  133: LOAD_LITERAL{16385}\n  134: LOAD_LITERAL{24577}\n  135: LOAD_LITERAL_ARRAY{30}\n  136: STORE_VALUE{dists}\n  137: LOAD_NAME{dext}\n  138: LOAD_LITERAL{}\n  139: LOAD_LITERAL{}\n  140: LOAD_LITERAL{}\n  141: LOAD_LITERAL{}\n  142: LOAD_LITERAL{1}\n  143: LOAD_LITERAL{1}\n  144: LOAD_LITERAL{2}\n  145: LOAD_LITERAL{2}\n  146: LOAD_LITERAL{3}\n  147: LOAD_LITERAL{3}\n  148: LOAD_LITERAL{4}\n  149: LOAD_LITERAL{4}\n  150: LOAD_LITERAL{5}\n  151: LOAD_LITERAL{5}\n  152: LOAD_LITERAL{6}\n  153: LOAD_LITERAL{6}\n  154: LOAD_LITERAL{7}\n  155: LOAD_LITERAL{7}\n  156: LOAD_LITERAL{8}\n  157: LOAD_LITERAL{8}\n  158: LOAD_LITERAL{9}\n  159: LOAD_LITERAL{9}\n  160: LOAD_LITERAL{10}\n  161: LOAD_LITERAL{10}\n  162: LOAD_LITERAL{11}\n  163: LOAD_LITERAL{11}\n  164: LOAD_LITERAL{12}\n  165: LOAD_LITERAL{12}\n  166: LOAD_LITERAL{13}\n  167: LOAD_LITERAL{13}\n  168: LOAD_LITERAL_ARRAY{30}\n  169: STORE_VALUE{dext}\n  170: LOAD_NAME{order}\n  171: LOAD_LITERAL{16}\n  172: LOAD_LITERAL{17}\n  173: LOAD_LITERAL{18}\n  174: LOAD_LITERAL{}\n  175: LOAD_LITERAL{8}\n  176: LOAD_LITERAL{7}\n  177: LOAD_LITERAL{9}\n  178: LOAD_LITERAL{6}\n  179: LOAD_LITERAL{10}\n  180: LOAD_LITERAL{5}\n  181: LOAD_LITERAL{11}\n  182: LOAD_LITERAL{4}\n  183: LOAD_LITERAL{12}\n  184: LOAD_LITERAL{3}\n  185: LOAD_LITERAL{13}\n  186: LOAD_LITERAL{2}\n  187: LOAD_LITERAL{14}\n  188: LOAD_LITERAL{1}\n  189: LOAD_LITERAL{15}\n  190: LOAD_LITERAL_ARRAY{19}\n  191: STORE_VALUE{order}\n  192: LOAD_NAME{WINDOW}\n  193: LOAD_LITERAL{32768}\n  194: STORE_VALUE{WINDOW}\n  195: LOAD_NAME{WINDOW_MINUS_ONE}\n  196: LOAD_VALUE{WINDOW}\n  197: LOAD_LITERAL{1}\n  198: SUB{}\n  199: STORE_VALUE{WINDOW_MINUS_ONE}\n  200: LOAD_NAME{writer}\n  201: LOAD_VALUE{inflate}\n  202: LOAD_VALUE{readdata}\n  203: CALL{1}\n  205: ENTER{FunctionDeclaration}\n  208: CREATE_FUNCTION{}\n  209: STORE_VALUE{onread}\n  210: POP{}\n  211: CREATE_FUNCTION{}\n  212: STORE_VALUE{noop}\n  213: POP{}\n  214: CREATE_FUNCTION{}\n  215: STORE_VALUE{call_header}\n  216: POP{}\n  217: CREATE_FUNCTION{}\n  218: STORE_VALUE{call_bytes}\n  219: POP{}\n  220: CREATE_FUNCTION{}\n  221: STORE_VALUE{call_bits}\n  222: POP{}\n  223: CREATE_FUNCTION{}\n  224: STORE_VALUE{call_codes}\n  225: POP{}\n  226: CREATE_FUNCTION{}\n  227: STORE_VALUE{call_dynamic}\n  228: POP{}\n  229: CREATE_FUNCTION{}\n  230: STORE_VALUE{call_decode}\n  231: POP{}\n  232: CREATE_FUNCTION{}\n  233: STORE_VALUE{write}\n  234: POP{}\n  235: CREATE_FUNCTION{}\n  236: STORE_VALUE{execute}\n  237: POP{}\n  238: CREATE_FUNCTION{}\n  239: STORE_VALUE{start_stream_header}\n  240: POP{}\n  241: CREATE_FUNCTION{}\n  242: STORE_VALUE{got_stream_header}\n  243: POP{}\n  244: CREATE_FUNCTION{}\n  245: STORE_VALUE{on_got_fdict}\n  246: POP{}\n  247: CREATE_FUNCTION{}\n  248: STORE_VALUE{on_got_is_final}\n  249: POP{}\n  250: CREATE_FUNCTION{}\n  251: STORE_VALUE{on_got_type}\n  252: POP{}\n  253: CREATE_FUNCTION{}\n  254: STORE_VALUE{on_got_len_nlen}\n  255: POP{}\n  256: CREATE_FUNCTION{}\n  257: STORE_VALUE{on_got_stored}\n  258: POP{}\n  259: CREATE_FUNCTION{}\n  260: STORE_VALUE{start_dynamic}\n  261: POP{}\n  262: CREATE_FUNCTION{}\n  263: STORE_VALUE{on_got_nlen}\n  264: POP{}\n  265: CREATE_FUNCTION{}\n  266: STORE_VALUE{on_got_ndist}\n  267: POP{}\n  268: CREATE_FUNCTION{}\n  269: STORE_VALUE{on_got_ncode}\n  270: POP{}\n  271: CREATE_FUNCTION{}\n  272: STORE_VALUE{on_got_lengths_part}\n  273: POP{}\n  274: CREATE_FUNCTION{}\n  275: STORE_VALUE{on_got_dynamic_symbol_iter}\n  276: POP{}\n  277: CREATE_FUNCTION{}\n  278: STORE_VALUE{on_got_dynamic_symbol_16}\n  279: POP{}\n  280: CREATE_FUNCTION{}\n  281: STORE_VALUE{on_got_dynamic_symbol_17}\n  282: POP{}\n  283: CREATE_FUNCTION{}\n  284: STORE_VALUE{on_got_dynamic_symbol}\n  285: POP{}\n  286: CREATE_FUNCTION{}\n  287: STORE_VALUE{do_dynamic_end_loop}\n  288: POP{}\n  289: CREATE_FUNCTION{}\n  290: STORE_VALUE{do_check}\n  291: POP{}\n  292: CREATE_FUNCTION{}\n  293: STORE_VALUE{end_read_dynamic}\n  294: POP{}\n  295: CREATE_FUNCTION{}\n  296: STORE_VALUE{start_codes}\n  297: POP{}\n  298: CREATE_FUNCTION{}\n  299: STORE_VALUE{on_got_codes_symbol}\n  300: POP{}\n  301: CREATE_FUNCTION{}\n  302: STORE_VALUE{on_got_codes_len}\n  303: POP{}\n  304: CREATE_FUNCTION{}\n  305: STORE_VALUE{on_got_codes_dist_symbol}\n  306: POP{}\n  307: CREATE_FUNCTION{}\n  308: STORE_VALUE{on_got_codes_dist_dist}\n  309: POP{}\n  310: CREATE_FUNCTION{}\n  311: STORE_VALUE{done_with_codes}\n  312: POP{}\n  313: CREATE_FUNCTION{}\n  314: STORE_VALUE{on_got_adler}\n  315: POP{}\n  316: CREATE_FUNCTION{}\n  317: STORE_VALUE{decode}\n  318: POP{}\n  319: CREATE_FUNCTION{}\n  320: STORE_VALUE{_decode}\n  321: POP{}\n  322: CREATE_FUNCTION{}\n  323: STORE_VALUE{got_decode_bit}\n  324: POP{}\n  325: CREATE_FUNCTION{}\n  326: STORE_VALUE{become}\n  327: POP{}\n  328: CREATE_FUNCTION{}\n  329: STORE_VALUE{unbecome}\n  330: POP{}\n  331: CREATE_FUNCTION{}\n  332: STORE_VALUE{bits}\n  333: POP{}\n  334: CREATE_FUNCTION{}\n  335: STORE_VALUE{bytes}\n  336: POP{}\n  337: CREATE_FUNCTION{}\n  338: STORE_VALUE{take}\n  339: POP{}\n  340: CREATE_FUNCTION{}\n  341: STORE_VALUE{takebyte}\n  342: POP{}\n  343: CREATE_FUNCTION{}\n  344: STORE_VALUE{output_one}\n  345: POP{}\n  346: CREATE_FUNCTION{}\n  347: STORE_VALUE{output_one_pool}\n  348: POP{}\n  349: CREATE_FUNCTION{}\n  350: STORE_VALUE{output_one_recycle}\n  351: POP{}\n  352: CREATE_FUNCTION{}\n  353: STORE_VALUE{output_many}\n  354: POP{}\n  355: ENTER{BlockStatement}\n  357: LOAD_NAME{output}\n  358: LOAD_NAME{Uint8Array}\n  359: LOAD_VALUE{WINDOW}\n}" -> "B2 {\n  360: NEW{}\n}"[color="gray"]
"204: EXC{FunctionDeclaration}";
"B2 {\n  360: NEW{}\n}" -> "204: EXC{FunctionDeclaration}"[color="purple"]
"B3 {\n  361: STORE_VALUE{output}\n  362: LOAD_NAME{need_input}\n  363: LOAD_LITERAL{}\n  364: STORE_VALUE{need_input}\n  365: LOAD_NAME{buffer_offset}\n  366: LOAD_LITERAL{}\n  367: STORE_VALUE{buffer_offset}\n  368: LOAD_NAME{bytes_read}\n  369: LOAD_LITERAL{}\n  370: STORE_VALUE{bytes_read}\n  371: LOAD_NAME{output_idx}\n  372: LOAD_LITERAL{}\n  373: STORE_VALUE{output_idx}\n  374: LOAD_NAME{ended}\n  375: LOAD_LITERAL{}\n  376: STORE_VALUE{ended}\n  377: LOAD_NAME{state}\n  378: LOAD_LITERAL{}\n  379: STORE_VALUE{state}\n  380: LOAD_NAME{states}\n  381: LOAD_LITERAL_ARRAY{}\n  382: STORE_VALUE{states}\n  383: LOAD_NAME{buffer}\n  384: LOAD_LITERAL_ARRAY{}\n  385: STORE_VALUE{buffer}\n  386: LOAD_NAME{got}\n  387: LOAD_LITERAL{}\n  388: STORE_VALUE{got}\n  389: LOAD_NAME{OUTPUT_ONE_LENGTH}\n  390: LOAD_LITERAL{131070}\n  391: STORE_VALUE{OUTPUT_ONE_LENGTH}\n  392: LOAD_NAME{output_one_offs}\n  393: LOAD_VALUE{OUTPUT_ONE_LENGTH}\n  394: STORE_VALUE{output_one_offs}\n  395: LOAD_NAME{bitbuf}\n  396: LOAD_LITERAL{}\n  397: STORE_VALUE{bitbuf}\n  398: LOAD_NAME{bitcnt}\n  399: LOAD_LITERAL{}\n  400: STORE_VALUE{bitcnt}\n  401: LOAD_NAME{is_final}\n  402: LOAD_LITERAL{}\n  403: STORE_VALUE{is_final}\n  404: LOAD_NAME{adler_s1}\n  405: LOAD_LITERAL{1}\n  406: STORE_VALUE{adler_s1}\n  407: LOAD_NAME{adler_s2}\n  408: LOAD_LITERAL{}\n  409: STORE_VALUE{adler_s2}\n  410: LOAD_VALUE{onread}\n  411: LOAD_PROP_NAME{recycle}\n  412: CREATE_FUNCTION{}\n  413: STORE_VALUE{recycle}\n  414: POP{}\n  415: LOAD_NAME{bytes_need}\n  416: LOAD_LITERAL{}\n  417: STORE_VALUE{bytes_need}\n  418: LOAD_NAME{bytes_value}\n  419: LOAD_LITERAL_ARRAY{}\n  420: STORE_VALUE{bytes_value}\n  421: LOAD_NAME{bits_need}\n  422: LOAD_LITERAL{}\n  423: STORE_VALUE{bits_need}\n  424: LOAD_NAME{bits_value}\n  425: LOAD_LITERAL_ARRAY{}\n  426: STORE_VALUE{bits_value}\n  427: LOAD_NAME{codes_distcode}\n  428: LOAD_LITERAL{}\n  429: STORE_VALUE{codes_distcode}\n  430: LOAD_NAME{codes_lencode}\n  431: LOAD_LITERAL{}\n  432: STORE_VALUE{codes_lencode}\n  433: LOAD_NAME{codes_len}\n  434: LOAD_LITERAL{}\n  435: STORE_VALUE{codes_len}\n  436: LOAD_NAME{codes_dist}\n  437: LOAD_LITERAL{}\n  438: STORE_VALUE{codes_dist}\n  439: LOAD_NAME{codes_symbol}\n  440: LOAD_LITERAL{}\n  441: STORE_VALUE{codes_symbol}\n  442: LOAD_NAME{dynamic_distcode}\n  443: LOAD_LITERAL_ARRAY{}\n  444: LOAD_LITERAL_ARRAY{}\n  445: LOAD_LITERAL_OBJECT{2}\n  446: STORE_VALUE{dynamic_distcode}\n  447: LOAD_NAME{dynamic_lencode}\n  448: LOAD_LITERAL_ARRAY{}\n  449: LOAD_LITERAL_ARRAY{}\n  450: LOAD_LITERAL_OBJECT{2}\n  451: STORE_VALUE{dynamic_lencode}\n  452: LOAD_NAME{dynamic_lengths}\n  453: LOAD_LITERAL_ARRAY{}\n  454: STORE_VALUE{dynamic_lengths}\n  455: LOAD_NAME{dynamic_nlen}\n  456: LOAD_LITERAL{}\n  457: STORE_VALUE{dynamic_nlen}\n  458: LOAD_NAME{dynamic_ndist}\n  459: LOAD_LITERAL{}\n  460: STORE_VALUE{dynamic_ndist}\n  461: LOAD_NAME{dynamic_ncode}\n  462: LOAD_LITERAL{}\n  463: STORE_VALUE{dynamic_ncode}\n  464: LOAD_NAME{dynamic_index}\n  465: LOAD_LITERAL{}\n  466: STORE_VALUE{dynamic_index}\n  467: LOAD_NAME{dynamic_symbol}\n  468: LOAD_LITERAL{}\n  469: STORE_VALUE{dynamic_symbol}\n  470: LOAD_NAME{dynamic_len}\n  471: LOAD_LITERAL{}\n  472: STORE_VALUE{dynamic_len}\n  473: LOAD_NAME{decode_huffman}\n  474: LOAD_LITERAL{}\n  475: STORE_VALUE{decode_huffman}\n  476: LOAD_NAME{decode_len}\n  477: LOAD_LITERAL{}\n  478: STORE_VALUE{decode_len}\n  479: LOAD_NAME{decode_code}\n  480: LOAD_LITERAL{}\n  481: STORE_VALUE{decode_code}\n  482: LOAD_NAME{decode_first}\n  483: LOAD_LITERAL{}\n  484: STORE_VALUE{decode_first}\n  485: LOAD_NAME{decode_count}\n  486: LOAD_LITERAL{}\n  487: STORE_VALUE{decode_count}\n  488: LOAD_NAME{decode_index}\n  489: LOAD_LITERAL{}\n  490: STORE_VALUE{decode_index}\n  491: LOAD_NAME{last}\n  492: LOAD_LITERAL{}\n  493: STORE_VALUE{last}\n  494: LOAD_VALUE{become}\n  495: LOAD_VALUE{noop}\n  496: LOAD_LITERAL_OBJECT{}\n  497: LOAD_VALUE{noop}\n  498: CALL{3}\n  500: ENTER{FunctionDeclaration}\n  503: ENTER{BlockStatement}\n  505: ENTER{IfStatement}\n  507: LOAD_VALUE{then}\n  508: TYPEOF{}\n  509: LOAD_LITERAL{function}\n  510: SNEQ{}\n}";
"B2 {\n  360: NEW{}\n}" -> "B3 {\n  361: STORE_VALUE{output}\n  362: LOAD_NAME{need_input}\n  363: LOAD_LITERAL{}\n  364: STORE_VALUE{need_input}\n  365: LOAD_NAME{buffer_offset}\n  366: LOAD_LITERAL{}\n  367: STORE_VALUE{buffer_offset}\n  368: LOAD_NAME{bytes_read}\n  369: LOAD_LITERAL{}\n  370: STORE_VALUE{bytes_read}\n  371: LOAD_NAME{output_idx}\n  372: LOAD_LITERAL{}\n  373: STORE_VALUE{output_idx}\n  374: LOAD_NAME{ended}\n  375: LOAD_LITERAL{}\n  376: STORE_VALUE{ended}\n  377: LOAD_NAME{state}\n  378: LOAD_LITERAL{}\n  379: STORE_VALUE{state}\n  380: LOAD_NAME{states}\n  381: LOAD_LITERAL_ARRAY{}\n  382: STORE_VALUE{states}\n  383: LOAD_NAME{buffer}\n  384: LOAD_LITERAL_ARRAY{}\n  385: STORE_VALUE{buffer}\n  386: LOAD_NAME{got}\n  387: LOAD_LITERAL{}\n  388: STORE_VALUE{got}\n  389: LOAD_NAME{OUTPUT_ONE_LENGTH}\n  390: LOAD_LITERAL{131070}\n  391: STORE_VALUE{OUTPUT_ONE_LENGTH}\n  392: LOAD_NAME{output_one_offs}\n  393: LOAD_VALUE{OUTPUT_ONE_LENGTH}\n  394: STORE_VALUE{output_one_offs}\n  395: LOAD_NAME{bitbuf}\n  396: LOAD_LITERAL{}\n  397: STORE_VALUE{bitbuf}\n  398: LOAD_NAME{bitcnt}\n  399: LOAD_LITERAL{}\n  400: STORE_VALUE{bitcnt}\n  401: LOAD_NAME{is_final}\n  402: LOAD_LITERAL{}\n  403: STORE_VALUE{is_final}\n  404: LOAD_NAME{adler_s1}\n  405: LOAD_LITERAL{1}\n  406: STORE_VALUE{adler_s1}\n  407: LOAD_NAME{adler_s2}\n  408: LOAD_LITERAL{}\n  409: STORE_VALUE{adler_s2}\n  410: LOAD_VALUE{onread}\n  411: LOAD_PROP_NAME{recycle}\n  412: CREATE_FUNCTION{}\n  413: STORE_VALUE{recycle}\n  414: POP{}\n  415: LOAD_NAME{bytes_need}\n  416: LOAD_LITERAL{}\n  417: STORE_VALUE{bytes_need}\n  418: LOAD_NAME{bytes_value}\n  419: LOAD_LITERAL_ARRAY{}\n  420: STORE_VALUE{bytes_value}\n  421: LOAD_NAME{bits_need}\n  422: LOAD_LITERAL{}\n  423: STORE_VALUE{bits_need}\n  424: LOAD_NAME{bits_value}\n  425: LOAD_LITERAL_ARRAY{}\n  426: STORE_VALUE{bits_value}\n  427: LOAD_NAME{codes_distcode}\n  428: LOAD_LITERAL{}\n  429: STORE_VALUE{codes_distcode}\n  430: LOAD_NAME{codes_lencode}\n  431: LOAD_LITERAL{}\n  432: STORE_VALUE{codes_lencode}\n  433: LOAD_NAME{codes_len}\n  434: LOAD_LITERAL{}\n  435: STORE_VALUE{codes_len}\n  436: LOAD_NAME{codes_dist}\n  437: LOAD_LITERAL{}\n  438: STORE_VALUE{codes_dist}\n  439: LOAD_NAME{codes_symbol}\n  440: LOAD_LITERAL{}\n  441: STORE_VALUE{codes_symbol}\n  442: LOAD_NAME{dynamic_distcode}\n  443: LOAD_LITERAL_ARRAY{}\n  444: LOAD_LITERAL_ARRAY{}\n  445: LOAD_LITERAL_OBJECT{2}\n  446: STORE_VALUE{dynamic_distcode}\n  447: LOAD_NAME{dynamic_lencode}\n  448: LOAD_LITERAL_ARRAY{}\n  449: LOAD_LITERAL_ARRAY{}\n  450: LOAD_LITERAL_OBJECT{2}\n  451: STORE_VALUE{dynamic_lencode}\n  452: LOAD_NAME{dynamic_lengths}\n  453: LOAD_LITERAL_ARRAY{}\n  454: STORE_VALUE{dynamic_lengths}\n  455: LOAD_NAME{dynamic_nlen}\n  456: LOAD_LITERAL{}\n  457: STORE_VALUE{dynamic_nlen}\n  458: LOAD_NAME{dynamic_ndist}\n  459: LOAD_LITERAL{}\n  460: STORE_VALUE{dynamic_ndist}\n  461: LOAD_NAME{dynamic_ncode}\n  462: LOAD_LITERAL{}\n  463: STORE_VALUE{dynamic_ncode}\n  464: LOAD_NAME{dynamic_index}\n  465: LOAD_LITERAL{}\n  466: STORE_VALUE{dynamic_index}\n  467: LOAD_NAME{dynamic_symbol}\n  468: LOAD_LITERAL{}\n  469: STORE_VALUE{dynamic_symbol}\n  470: LOAD_NAME{dynamic_len}\n  471: LOAD_LITERAL{}\n  472: STORE_VALUE{dynamic_len}\n  473: LOAD_NAME{decode_huffman}\n  474: LOAD_LITERAL{}\n  475: STORE_VALUE{decode_huffman}\n  476: LOAD_NAME{decode_len}\n  477: LOAD_LITERAL{}\n  478: STORE_VALUE{decode_len}\n  479: LOAD_NAME{decode_code}\n  480: LOAD_LITERAL{}\n  481: STORE_VALUE{decode_code}\n  482: LOAD_NAME{decode_first}\n  483: LOAD_LITERAL{}\n  484: STORE_VALUE{decode_first}\n  485: LOAD_NAME{decode_count}\n  486: LOAD_LITERAL{}\n  487: STORE_VALUE{decode_count}\n  488: LOAD_NAME{decode_index}\n  489: LOAD_LITERAL{}\n  490: STORE_VALUE{decode_index}\n  491: LOAD_NAME{last}\n  492: LOAD_LITERAL{}\n  493: STORE_VALUE{last}\n  494: LOAD_VALUE{become}\n  495: LOAD_VALUE{noop}\n  496: LOAD_LITERAL_OBJECT{}\n  497: LOAD_VALUE{noop}\n  498: CALL{3}\n  500: ENTER{FunctionDeclaration}\n  503: ENTER{BlockStatement}\n  505: ENTER{IfStatement}\n  507: LOAD_VALUE{then}\n  508: TYPEOF{}\n  509: LOAD_LITERAL{function}\n  510: SNEQ{}\n}"[color="gray"]
"B4 {\n  511: TEST{}\n}";
"B3 {\n  361: STORE_VALUE{output}\n  362: LOAD_NAME{need_input}\n  363: LOAD_LITERAL{}\n  364: STORE_VALUE{need_input}\n  365: LOAD_NAME{buffer_offset}\n  366: LOAD_LITERAL{}\n  367: STORE_VALUE{buffer_offset}\n  368: LOAD_NAME{bytes_read}\n  369: LOAD_LITERAL{}\n  370: STORE_VALUE{bytes_read}\n  371: LOAD_NAME{output_idx}\n  372: LOAD_LITERAL{}\n  373: STORE_VALUE{output_idx}\n  374: LOAD_NAME{ended}\n  375: LOAD_LITERAL{}\n  376: STORE_VALUE{ended}\n  377: LOAD_NAME{state}\n  378: LOAD_LITERAL{}\n  379: STORE_VALUE{state}\n  380: LOAD_NAME{states}\n  381: LOAD_LITERAL_ARRAY{}\n  382: STORE_VALUE{states}\n  383: LOAD_NAME{buffer}\n  384: LOAD_LITERAL_ARRAY{}\n  385: STORE_VALUE{buffer}\n  386: LOAD_NAME{got}\n  387: LOAD_LITERAL{}\n  388: STORE_VALUE{got}\n  389: LOAD_NAME{OUTPUT_ONE_LENGTH}\n  390: LOAD_LITERAL{131070}\n  391: STORE_VALUE{OUTPUT_ONE_LENGTH}\n  392: LOAD_NAME{output_one_offs}\n  393: LOAD_VALUE{OUTPUT_ONE_LENGTH}\n  394: STORE_VALUE{output_one_offs}\n  395: LOAD_NAME{bitbuf}\n  396: LOAD_LITERAL{}\n  397: STORE_VALUE{bitbuf}\n  398: LOAD_NAME{bitcnt}\n  399: LOAD_LITERAL{}\n  400: STORE_VALUE{bitcnt}\n  401: LOAD_NAME{is_final}\n  402: LOAD_LITERAL{}\n  403: STORE_VALUE{is_final}\n  404: LOAD_NAME{adler_s1}\n  405: LOAD_LITERAL{1}\n  406: STORE_VALUE{adler_s1}\n  407: LOAD_NAME{adler_s2}\n  408: LOAD_LITERAL{}\n  409: STORE_VALUE{adler_s2}\n  410: LOAD_VALUE{onread}\n  411: LOAD_PROP_NAME{recycle}\n  412: CREATE_FUNCTION{}\n  413: STORE_VALUE{recycle}\n  414: POP{}\n  415: LOAD_NAME{bytes_need}\n  416: LOAD_LITERAL{}\n  417: STORE_VALUE{bytes_need}\n  418: LOAD_NAME{bytes_value}\n  419: LOAD_LITERAL_ARRAY{}\n  420: STORE_VALUE{bytes_value}\n  421: LOAD_NAME{bits_need}\n  422: LOAD_LITERAL{}\n  423: STORE_VALUE{bits_need}\n  424: LOAD_NAME{bits_value}\n  425: LOAD_LITERAL_ARRAY{}\n  426: STORE_VALUE{bits_value}\n  427: LOAD_NAME{codes_distcode}\n  428: LOAD_LITERAL{}\n  429: STORE_VALUE{codes_distcode}\n  430: LOAD_NAME{codes_lencode}\n  431: LOAD_LITERAL{}\n  432: STORE_VALUE{codes_lencode}\n  433: LOAD_NAME{codes_len}\n  434: LOAD_LITERAL{}\n  435: STORE_VALUE{codes_len}\n  436: LOAD_NAME{codes_dist}\n  437: LOAD_LITERAL{}\n  438: STORE_VALUE{codes_dist}\n  439: LOAD_NAME{codes_symbol}\n  440: LOAD_LITERAL{}\n  441: STORE_VALUE{codes_symbol}\n  442: LOAD_NAME{dynamic_distcode}\n  443: LOAD_LITERAL_ARRAY{}\n  444: LOAD_LITERAL_ARRAY{}\n  445: LOAD_LITERAL_OBJECT{2}\n  446: STORE_VALUE{dynamic_distcode}\n  447: LOAD_NAME{dynamic_lencode}\n  448: LOAD_LITERAL_ARRAY{}\n  449: LOAD_LITERAL_ARRAY{}\n  450: LOAD_LITERAL_OBJECT{2}\n  451: STORE_VALUE{dynamic_lencode}\n  452: LOAD_NAME{dynamic_lengths}\n  453: LOAD_LITERAL_ARRAY{}\n  454: STORE_VALUE{dynamic_lengths}\n  455: LOAD_NAME{dynamic_nlen}\n  456: LOAD_LITERAL{}\n  457: STORE_VALUE{dynamic_nlen}\n  458: LOAD_NAME{dynamic_ndist}\n  459: LOAD_LITERAL{}\n  460: STORE_VALUE{dynamic_ndist}\n  461: LOAD_NAME{dynamic_ncode}\n  462: LOAD_LITERAL{}\n  463: STORE_VALUE{dynamic_ncode}\n  464: LOAD_NAME{dynamic_index}\n  465: LOAD_LITERAL{}\n  466: STORE_VALUE{dynamic_index}\n  467: LOAD_NAME{dynamic_symbol}\n  468: LOAD_LITERAL{}\n  469: STORE_VALUE{dynamic_symbol}\n  470: LOAD_NAME{dynamic_len}\n  471: LOAD_LITERAL{}\n  472: STORE_VALUE{dynamic_len}\n  473: LOAD_NAME{decode_huffman}\n  474: LOAD_LITERAL{}\n  475: STORE_VALUE{decode_huffman}\n  476: LOAD_NAME{decode_len}\n  477: LOAD_LITERAL{}\n  478: STORE_VALUE{decode_len}\n  479: LOAD_NAME{decode_code}\n  480: LOAD_LITERAL{}\n  481: STORE_VALUE{decode_code}\n  482: LOAD_NAME{decode_first}\n  483: LOAD_LITERAL{}\n  484: STORE_VALUE{decode_first}\n  485: LOAD_NAME{decode_count}\n  486: LOAD_LITERAL{}\n  487: STORE_VALUE{decode_count}\n  488: LOAD_NAME{decode_index}\n  489: LOAD_LITERAL{}\n  490: STORE_VALUE{decode_index}\n  491: LOAD_NAME{last}\n  492: LOAD_LITERAL{}\n  493: STORE_VALUE{last}\n  494: LOAD_VALUE{become}\n  495: LOAD_VALUE{noop}\n  496: LOAD_LITERAL_OBJECT{}\n  497: LOAD_VALUE{noop}\n  498: CALL{3}\n  500: ENTER{FunctionDeclaration}\n  503: ENTER{BlockStatement}\n  505: ENTER{IfStatement}\n  507: LOAD_VALUE{then}\n  508: TYPEOF{}\n  509: LOAD_LITERAL{function}\n  510: SNEQ{}\n}" -> "B4 {\n  511: TEST{}\n}"[color="gray"]
"B5 {\n  512: ENTER{BlockStatement}\n}";
"B4 {\n  511: TEST{}\n}" -> "B5 {\n  512: ENTER{BlockStatement}\n}"[color="green"]
"B6 {\n  514: LOAD_NAME{Error}\n}";
"B5 {\n  512: ENTER{BlockStatement}\n}" -> "B6 {\n  514: LOAD_NAME{Error}\n}"[color="gray"]
"B7 {\n  515: NEW{}\n}";
"B6 {\n  514: LOAD_NAME{Error}\n}" -> "B7 {\n  515: NEW{}\n}"[color="gray"]
"499: EXC{FunctionDeclaration}";
"B7 {\n  515: NEW{}\n}" -> "499: EXC{FunctionDeclaration}"[color="purple"]
"B8 {\n  506: EXIT{IfStatement}\n}";
"B4 {\n  511: TEST{}\n}" -> "B8 {\n  506: EXIT{IfStatement}\n}"[color="red"]
"B9 {\n  517: LOAD_VALUE{states}\n  518: LOAD_PROP_NAME{unshift}\n  519: LOAD_VALUE{fn}\n  520: LOAD_VALUE{then}\n  521: LOAD_LITERAL_OBJECT{2}\n}";
"B8 {\n  506: EXIT{IfStatement}\n}" -> "B9 {\n  517: LOAD_VALUE{states}\n  518: LOAD_PROP_NAME{unshift}\n  519: LOAD_VALUE{fn}\n  520: LOAD_VALUE{then}\n  521: LOAD_LITERAL_OBJECT{2}\n}"[color="gray"]
"B10 {\n  522: CALL{1}\n}";
"B9 {\n  517: LOAD_VALUE{states}\n  518: LOAD_PROP_NAME{unshift}\n  519: LOAD_VALUE{fn}\n  520: LOAD_VALUE{then}\n  521: LOAD_LITERAL_OBJECT{2}\n}" -> "B10 {\n  522: CALL{1}\n}"[color="gray"]
"B10 {\n  522: CALL{1}\n}" -> "499: EXC{FunctionDeclaration}"[color="purple"]
"B11 {\n  523: POP{}\n  504: EXIT{BlockStatement}\n  501: EXIT{FunctionDeclaration}\n  524: POP{}\n  525: LOAD_VALUE{start_stream_header}\n  526: CALL{}\n  528: ENTER{FunctionDeclaration}\n  531: ENTER{BlockStatement}\n  533: LOAD_VALUE{become}\n  534: LOAD_VALUE{bytes}\n  535: LOAD_VALUE{call_bytes}\n  536: LOAD_LITERAL{2}\n  537: CALL{1}\n  539: ENTER{FunctionDeclaration}\n  542: ENTER{BlockStatement}\n  544: LOAD_VALUE{bytes_value}\n  545: LOAD_PROP_NAME{length}\n  546: LOAD_LITERAL{}\n  547: STORE_VALUE{length}\n  548: POP{}\n  549: LOAD_NAME{bytes_need}\n  550: LOAD_VALUE{need}\n  551: STORE_VALUE{bytes_need}\n  552: POP{}\n  543: EXIT{BlockStatement}\n  540: EXIT{FunctionDeclaration}\n  553: LOAD_VALUE{got_stream_header}\n  554: CALL{3}\n  556: ENTER{FunctionDeclaration}\n  559: ENTER{BlockStatement}\n  561: ENTER{IfStatement}\n  563: LOAD_VALUE{then}\n  564: TYPEOF{}\n  565: LOAD_LITERAL{function}\n  566: SNEQ{}\n}";
"B10 {\n  522: CALL{1}\n}" -> "B11 {\n  523: POP{}\n  504: EXIT{BlockStatement}\n  501: EXIT{FunctionDeclaration}\n  524: POP{}\n  525: LOAD_VALUE{start_stream_header}\n  526: CALL{}\n  528: ENTER{FunctionDeclaration}\n  531: ENTER{BlockStatement}\n  533: LOAD_VALUE{become}\n  534: LOAD_VALUE{bytes}\n  535: LOAD_VALUE{call_bytes}\n  536: LOAD_LITERAL{2}\n  537: CALL{1}\n  539: ENTER{FunctionDeclaration}\n  542: ENTER{BlockStatement}\n  544: LOAD_VALUE{bytes_value}\n  545: LOAD_PROP_NAME{length}\n  546: LOAD_LITERAL{}\n  547: STORE_VALUE{length}\n  548: POP{}\n  549: LOAD_NAME{bytes_need}\n  550: LOAD_VALUE{need}\n  551: STORE_VALUE{bytes_need}\n  552: POP{}\n  543: EXIT{BlockStatement}\n  540: EXIT{FunctionDeclaration}\n  553: LOAD_VALUE{got_stream_header}\n  554: CALL{3}\n  556: ENTER{FunctionDeclaration}\n  559: ENTER{BlockStatement}\n  561: ENTER{IfStatement}\n  563: LOAD_VALUE{then}\n  564: TYPEOF{}\n  565: LOAD_LITERAL{function}\n  566: SNEQ{}\n}"[color="gray"]
"B12 {\n  567: TEST{}\n}";
"B11 {\n  523: POP{}\n  504: EXIT{BlockStatement}\n  501: EXIT{FunctionDeclaration}\n  524: POP{}\n  525: LOAD_VALUE{start_stream_header}\n  526: CALL{}\n  528: ENTER{FunctionDeclaration}\n  531: ENTER{BlockStatement}\n  533: LOAD_VALUE{become}\n  534: LOAD_VALUE{bytes}\n  535: LOAD_VALUE{call_bytes}\n  536: LOAD_LITERAL{2}\n  537: CALL{1}\n  539: ENTER{FunctionDeclaration}\n  542: ENTER{BlockStatement}\n  544: LOAD_VALUE{bytes_value}\n  545: LOAD_PROP_NAME{length}\n  546: LOAD_LITERAL{}\n  547: STORE_VALUE{length}\n  548: POP{}\n  549: LOAD_NAME{bytes_need}\n  550: LOAD_VALUE{need}\n  551: STORE_VALUE{bytes_need}\n  552: POP{}\n  543: EXIT{BlockStatement}\n  540: EXIT{FunctionDeclaration}\n  553: LOAD_VALUE{got_stream_header}\n  554: CALL{3}\n  556: ENTER{FunctionDeclaration}\n  559: ENTER{BlockStatement}\n  561: ENTER{IfStatement}\n  563: LOAD_VALUE{then}\n  564: TYPEOF{}\n  565: LOAD_LITERAL{function}\n  566: SNEQ{}\n}" -> "B12 {\n  567: TEST{}\n}"[color="gray"]
"B13 {\n  568: ENTER{BlockStatement}\n}";
"B12 {\n  567: TEST{}\n}" -> "B13 {\n  568: ENTER{BlockStatement}\n}"[color="green"]
"B14 {\n  570: LOAD_NAME{Error}\n}";
"B13 {\n  568: ENTER{BlockStatement}\n}" -> "B14 {\n  570: LOAD_NAME{Error}\n}"[color="gray"]
"B15 {\n  571: NEW{}\n}";
"B14 {\n  570: LOAD_NAME{Error}\n}" -> "B15 {\n  571: NEW{}\n}"[color="gray"]
"555: EXC{FunctionDeclaration}";
"B15 {\n  571: NEW{}\n}" -> "555: EXC{FunctionDeclaration}"[color="purple"]
"B16 {\n  562: EXIT{IfStatement}\n}";
"B12 {\n  567: TEST{}\n}" -> "B16 {\n  562: EXIT{IfStatement}\n}"[color="red"]
"B17 {\n  573: LOAD_VALUE{states}\n  574: LOAD_PROP_NAME{unshift}\n  575: LOAD_VALUE{fn}\n  576: LOAD_VALUE{then}\n  577: LOAD_LITERAL_OBJECT{2}\n  578: CALL{1}\n  579: POP{}\n  560: EXIT{BlockStatement}\n  557: EXIT{FunctionDeclaration}\n  580: POP{}\n  532: EXIT{BlockStatement}\n  529: EXIT{FunctionDeclaration}\n  581: POP{}\n  582: LOAD_VALUE{onread}\n}";
"B16 {\n  562: EXIT{IfStatement}\n}" -> "B17 {\n  573: LOAD_VALUE{states}\n  574: LOAD_PROP_NAME{unshift}\n  575: LOAD_VALUE{fn}\n  576: LOAD_VALUE{then}\n  577: LOAD_LITERAL_OBJECT{2}\n  578: CALL{1}\n  579: POP{}\n  560: EXIT{BlockStatement}\n  557: EXIT{FunctionDeclaration}\n  580: POP{}\n  532: EXIT{BlockStatement}\n  529: EXIT{FunctionDeclaration}\n  581: POP{}\n  582: LOAD_VALUE{onread}\n}"[color="gray"]
"B18 {\n  206: EXIT{FunctionDeclaration}\n}";
"B17 {\n  573: LOAD_VALUE{states}\n  574: LOAD_PROP_NAME{unshift}\n  575: LOAD_VALUE{fn}\n  576: LOAD_VALUE{then}\n  577: LOAD_LITERAL_OBJECT{2}\n  578: CALL{1}\n  579: POP{}\n  560: EXIT{BlockStatement}\n  557: EXIT{FunctionDeclaration}\n  580: POP{}\n  532: EXIT{BlockStatement}\n  529: EXIT{FunctionDeclaration}\n  581: POP{}\n  582: LOAD_VALUE{onread}\n}" -> "B18 {\n  206: EXIT{FunctionDeclaration}\n}"[color="gray"]
"B19 {\n  584: STORE_VALUE{writer}\n}";
"B18 {\n  206: EXIT{FunctionDeclaration}\n}" -> "B19 {\n  584: STORE_VALUE{writer}\n}"[color="gray"]
"B20 {\n  585: LOAD_VALUE{console}\n}";
"B19 {\n  584: STORE_VALUE{writer}\n}" -> "B20 {\n  585: LOAD_VALUE{console}\n}"[color="gray"]
"1: EXC{Program}";
"B20 {\n  585: LOAD_VALUE{console}\n}" -> "1: EXC{Program}"[color="purple"]
"B21 {\n  586: LOAD_PROP_NAME{log}\n}";
"B20 {\n  585: LOAD_VALUE{console}\n}" -> "B21 {\n  586: LOAD_PROP_NAME{log}\n}"[color="gray"]
"B21 {\n  586: LOAD_PROP_NAME{log}\n}" -> "1: EXC{Program}"[color="purple"]
"B22 {\n  587: LOAD_LITERAL{ok}\n}";
"B21 {\n  586: LOAD_PROP_NAME{log}\n}" -> "B22 {\n  587: LOAD_LITERAL{ok}\n}"[color="gray"]
"B23 {\n  588: CALL{1}\n}";
"B22 {\n  587: LOAD_LITERAL{ok}\n}" -> "B23 {\n  588: CALL{1}\n}"[color="gray"]
"B23 {\n  588: CALL{1}\n}" -> "1: EXC{Program}"[color="purple"]
"B24 {\n  589: POP{}\n  590: LOAD_VALUE{writer}\n  591: LOAD_LITERAL{}\n  592: CREATE_FUNCTION{}\n  593: CALL{2}\n  595: ENTER{FunctionDeclaration}\n  598: ENTER{BlockStatement}\n  600: ENTER{IfStatement}\n  602: LOAD_VALUE{buf}\n}";
"B23 {\n  588: CALL{1}\n}" -> "B24 {\n  589: POP{}\n  590: LOAD_VALUE{writer}\n  591: LOAD_LITERAL{}\n  592: CREATE_FUNCTION{}\n  593: CALL{2}\n  595: ENTER{FunctionDeclaration}\n  598: ENTER{BlockStatement}\n  600: ENTER{IfStatement}\n  602: LOAD_VALUE{buf}\n}"[color="gray"]
"B25 {\n  603: LOAD_VALUE{undefined}\n}";
"B24 {\n  589: POP{}\n  590: LOAD_VALUE{writer}\n  591: LOAD_LITERAL{}\n  592: CREATE_FUNCTION{}\n  593: CALL{2}\n  595: ENTER{FunctionDeclaration}\n  598: ENTER{BlockStatement}\n  600: ENTER{IfStatement}\n  602: LOAD_VALUE{buf}\n}" -> "B25 {\n  603: LOAD_VALUE{undefined}\n}"[color="gray"]
"594: EXC{FunctionDeclaration}";
"B25 {\n  603: LOAD_VALUE{undefined}\n}" -> "594: EXC{FunctionDeclaration}"[color="purple"]
"B26 {\n  604: SEQ{}\n}";
"B25 {\n  603: LOAD_VALUE{undefined}\n}" -> "B26 {\n  604: SEQ{}\n}"[color="gray"]
"B27 {\n  605: TEST{}\n}";
"B26 {\n  604: SEQ{}\n}" -> "B27 {\n  605: TEST{}\n}"[color="gray"]
"B28 {\n  606: ENTER{BlockStatement}\n}";
"B27 {\n  605: TEST{}\n}" -> "B28 {\n  606: ENTER{BlockStatement}\n}"[color="green"]
"B29 {\n  608: LOAD_VALUE{emit}\n  609: LOAD_VALUE{err}\n  610: CALL{1}\n  612: ENTER{FunctionDeclaration}\n  615: ENTER{BlockStatement}\n  617: LOAD_VALUE{ready}\n}";
"B28 {\n  606: ENTER{BlockStatement}\n}" -> "B29 {\n  608: LOAD_VALUE{emit}\n  609: LOAD_VALUE{err}\n  610: CALL{1}\n  612: ENTER{FunctionDeclaration}\n  615: ENTER{BlockStatement}\n  617: LOAD_VALUE{ready}\n}"[color="gray"]
"B30 {\n  618: CALL{}\n}";
"B29 {\n  608: LOAD_VALUE{emit}\n  609: LOAD_VALUE{err}\n  610: CALL{1}\n  612: ENTER{FunctionDeclaration}\n  615: ENTER{BlockStatement}\n  617: LOAD_VALUE{ready}\n}" -> "B30 {\n  618: CALL{}\n}"[color="gray"]
"611: EXC{FunctionDeclaration}";
"B30 {\n  618: CALL{}\n}" -> "611: EXC{FunctionDeclaration}"[color="purple"]
"B31 {\n  619: UNREACHABLE{}\n  620: POP{}\n  616: EXIT{BlockStatement}\n  613: EXIT{FunctionDeclaration}\n}";
"B30 {\n  618: CALL{}\n}" -> "B31 {\n  619: UNREACHABLE{}\n  620: POP{}\n  616: EXIT{BlockStatement}\n  613: EXIT{FunctionDeclaration}\n}"[color="gray"]
"B53 {\n  596: EXIT{FunctionDeclaration}\n}";
"B31 {\n  619: UNREACHABLE{}\n  620: POP{}\n  616: EXIT{BlockStatement}\n  613: EXIT{FunctionDeclaration}\n}" -> "B53 {\n  596: EXIT{FunctionDeclaration}\n}"[color="gray"]
"B32 {\n  601: EXIT{IfStatement}\n}";
"B27 {\n  605: TEST{}\n}" -> "B32 {\n  601: EXIT{IfStatement}\n}"[color="red"]
"B33 {\n  622: LOAD_VALUE{write}\n  623: LOAD_VALUE{buf}\n  624: CALL{1}\n  626: ENTER{FunctionDeclaration}\n  629: ENTER{BlockStatement}\n  631: LOAD_VALUE{buffer}\n  632: LOAD_PROP_NAME{push}\n  633: LOAD_VALUE{buf}\n}";
"B32 {\n  601: EXIT{IfStatement}\n}" -> "B33 {\n  622: LOAD_VALUE{write}\n  623: LOAD_VALUE{buf}\n  624: CALL{1}\n  626: ENTER{FunctionDeclaration}\n  629: ENTER{BlockStatement}\n  631: LOAD_VALUE{buffer}\n  632: LOAD_PROP_NAME{push}\n  633: LOAD_VALUE{buf}\n}"[color="gray"]
"B34 {\n  634: CALL{1}\n}";
"B33 {\n  622: LOAD_VALUE{write}\n  623: LOAD_VALUE{buf}\n  624: CALL{1}\n  626: ENTER{FunctionDeclaration}\n  629: ENTER{BlockStatement}\n  631: LOAD_VALUE{buffer}\n  632: LOAD_PROP_NAME{push}\n  633: LOAD_VALUE{buf}\n}" -> "B34 {\n  634: CALL{1}\n}"[color="gray"]
"625: EXC{FunctionDeclaration}";
"B34 {\n  634: CALL{1}\n}" -> "625: EXC{FunctionDeclaration}"[color="purple"]
"B35 {\n  635: POP{}\n  636: LOAD_NAME{got}\n  637: LOAD_VALUE{buf}\n  638: LOAD_PROP_VALUE{length}\n  639: ADD{}\n  640: STORE_VALUE{got}\n  641: POP{}\n  642: ENTER{IfStatement}\n  644: LOAD_VALUE{ended}\n  645: NOT{}\n}";
"B34 {\n  634: CALL{1}\n}" -> "B35 {\n  635: POP{}\n  636: LOAD_NAME{got}\n  637: LOAD_VALUE{buf}\n  638: LOAD_PROP_VALUE{length}\n  639: ADD{}\n  640: STORE_VALUE{got}\n  641: POP{}\n  642: ENTER{IfStatement}\n  644: LOAD_VALUE{ended}\n  645: NOT{}\n}"[color="gray"]
"B36 {\n  646: TEST{}\n}";
"B35 {\n  635: POP{}\n  636: LOAD_NAME{got}\n  637: LOAD_VALUE{buf}\n  638: LOAD_PROP_VALUE{length}\n  639: ADD{}\n  640: STORE_VALUE{got}\n  641: POP{}\n  642: ENTER{IfStatement}\n  644: LOAD_VALUE{ended}\n  645: NOT{}\n}" -> "B36 {\n  646: TEST{}\n}"[color="gray"]
"B37 {\n  647: ENTER{BlockStatement}\n}";
"B36 {\n  646: TEST{}\n}" -> "B37 {\n  647: ENTER{BlockStatement}\n}"[color="green"]
"B38 {\n  649: LOAD_VALUE{execute}\n  650: CALL{}\n  652: ENTER{FunctionDeclaration}\n  655: ENTER{BlockStatement}\n}";
"B37 {\n  647: ENTER{BlockStatement}\n}" -> "B38 {\n  649: LOAD_VALUE{execute}\n  650: CALL{}\n  652: ENTER{FunctionDeclaration}\n  655: ENTER{BlockStatement}\n}"[color="gray"]
"B39 {\n  657: ENTER{DoWhileStatement}\n}";
"B38 {\n  649: LOAD_VALUE{execute}\n  650: CALL{}\n  652: ENTER{FunctionDeclaration}\n  655: ENTER{BlockStatement}\n}" -> "B39 {\n  657: ENTER{DoWhileStatement}\n}"[color="gray"]
"B40 {\n  659: ENTER{BlockStatement}\n  661: LOAD_VALUE{states}\n  662: LOAD_LITERAL{}\n  663: LOAD_PROP_VALUE_DYN{}\n}";
"B39 {\n  657: ENTER{DoWhileStatement}\n}" -> "B40 {\n  659: ENTER{BlockStatement}\n  661: LOAD_VALUE{states}\n  662: LOAD_LITERAL{}\n  663: LOAD_PROP_VALUE_DYN{}\n}"[color="gray"]
"B41 {\n  664: LOAD_PROP_NAME{current}\n}";
"B40 {\n  659: ENTER{BlockStatement}\n  661: LOAD_VALUE{states}\n  662: LOAD_LITERAL{}\n  663: LOAD_PROP_VALUE_DYN{}\n}" -> "B41 {\n  664: LOAD_PROP_NAME{current}\n}"[color="gray"]
"651: EXC{FunctionDeclaration}";
"B41 {\n  664: LOAD_PROP_NAME{current}\n}" -> "651: EXC{FunctionDeclaration}"[color="purple"]
"B42 {\n  665: CALL{}\n}";
"B41 {\n  664: LOAD_PROP_NAME{current}\n}" -> "B42 {\n  665: CALL{}\n}"[color="gray"]
"B42 {\n  665: CALL{}\n}" -> "651: EXC{FunctionDeclaration}"[color="purple"]
"B43 {\n  666: POP{}\n  660: EXIT{BlockStatement}\n  667: ENTER{LogicalExpression}\n  669: LOAD_VALUE{need_input}\n  670: NOT{}\n}";
"B42 {\n  665: CALL{}\n}" -> "B43 {\n  666: POP{}\n  660: EXIT{BlockStatement}\n  667: ENTER{LogicalExpression}\n  669: LOAD_VALUE{need_input}\n  670: NOT{}\n}"[color="gray"]
"B44 {\n  671: TEST{}\n}";
"B43 {\n  666: POP{}\n  660: EXIT{BlockStatement}\n  667: ENTER{LogicalExpression}\n  669: LOAD_VALUE{need_input}\n  670: NOT{}\n}" -> "B44 {\n  671: TEST{}\n}"[color="gray"]
"B47 {\n  668: EXIT{LogicalExpression}\n}";
"B44 {\n  671: TEST{}\n}" -> "B47 {\n  668: EXIT{LogicalExpression}\n}"[color="red"]
"B45 {\n  672: LOAD_VALUE{ended}\n}";
"B44 {\n  671: TEST{}\n}" -> "B45 {\n  672: LOAD_VALUE{ended}\n}"[color="green"]
"B46 {\n  673: NOT{}\n}";
"B45 {\n  672: LOAD_VALUE{ended}\n}" -> "B46 {\n  673: NOT{}\n}"[color="gray"]
"B46 {\n  673: NOT{}\n}" -> "B47 {\n  668: EXIT{LogicalExpression}\n}"[color="gray"]
"B48 {\n  674: TEST{}\n}";
"B47 {\n  668: EXIT{LogicalExpression}\n}" -> "B48 {\n  674: TEST{}\n}"[color="gray"]
"B49 {\n  658: EXIT{DoWhileStatement}\n}";
"B48 {\n  674: TEST{}\n}" -> "B49 {\n  658: EXIT{DoWhileStatement}\n}"[color="red"]
"B48 {\n  674: TEST{}\n}" -> "B39 {\n  657: ENTER{DoWhileStatement}\n}"[color="green"]
"B50 {\n  675: LOAD_NAME{needed}\n  676: LOAD_VALUE{need_input}\n  677: STORE_VALUE{needed}\n  678: LOAD_NAME{need_input}\n  679: LOAD_LITERAL{}\n  680: STORE_VALUE{need_input}\n  681: POP{}\n  656: EXIT{BlockStatement}\n  653: EXIT{FunctionDeclaration}\n  682: POP{}\n  648: EXIT{BlockStatement}\n}";
"B49 {\n  658: EXIT{DoWhileStatement}\n}" -> "B50 {\n  675: LOAD_NAME{needed}\n  676: LOAD_VALUE{need_input}\n  677: STORE_VALUE{needed}\n  678: LOAD_NAME{need_input}\n  679: LOAD_LITERAL{}\n  680: STORE_VALUE{need_input}\n  681: POP{}\n  656: EXIT{BlockStatement}\n  653: EXIT{FunctionDeclaration}\n  682: POP{}\n  648: EXIT{BlockStatement}\n}"[color="gray"]
"B51 {\n  643: EXIT{IfStatement}\n}";
"B50 {\n  675: LOAD_NAME{needed}\n  676: LOAD_VALUE{need_input}\n  677: STORE_VALUE{needed}\n  678: LOAD_NAME{need_input}\n  679: LOAD_LITERAL{}\n  680: STORE_VALUE{need_input}\n  681: POP{}\n  656: EXIT{BlockStatement}\n  653: EXIT{FunctionDeclaration}\n  682: POP{}\n  648: EXIT{BlockStatement}\n}" -> "B51 {\n  643: EXIT{IfStatement}\n}"[color="gray"]
"B36 {\n  646: TEST{}\n}" -> "B51 {\n  643: EXIT{IfStatement}\n}"[color="red"]
"B52 {\n  630: EXIT{BlockStatement}\n  627: EXIT{FunctionDeclaration}\n}";
"B51 {\n  643: EXIT{IfStatement}\n}" -> "B52 {\n  630: EXIT{BlockStatement}\n  627: EXIT{FunctionDeclaration}\n}"[color="gray"]
"B52 {\n  630: EXIT{BlockStatement}\n  627: EXIT{FunctionDeclaration}\n}" -> "B53 {\n  596: EXIT{FunctionDeclaration}\n}"[color="gray"]
"B54 {\n  684: POP{}\n  5: EXIT{Program}\n}";
"B53 {\n  596: EXIT{FunctionDeclaration}\n}" -> "B54 {\n  684: POP{}\n  5: EXIT{Program}\n}"[color="gray"]
}
